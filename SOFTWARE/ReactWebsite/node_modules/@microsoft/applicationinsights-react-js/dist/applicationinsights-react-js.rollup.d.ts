/*
 * Microsoft Application Insights react plugin, 3.2.2
 * Copyright (c) Microsoft and contributors. All rights reserved.
 *
 * 
 * 
 *
 * ---------------------------------------------------------------------------
 * This is a single combined (rollup) declaration file for the package,
 * use this version if your build environment doesn't support the using the
 * individual *.d.ts files or default namespace wrapped version.
 * - Namespaced version: applicationinsights-react-js.d.ts
 * ---------------------------------------------------------------------------
 */

import { BaseTelemetryPlugin } from '@microsoft/applicationinsights-core-js';
import { Context } from 'react';
import { Dispatch } from 'react';
import { History as History_2 } from 'history';
import { IAppInsights } from '@microsoft/applicationinsights-common';
import { IAppInsightsCore } from '@microsoft/applicationinsights-core-js';
import { IConfig } from '@microsoft/applicationinsights-common';
import { IConfiguration } from '@microsoft/applicationinsights-core-js';
import { ICookieMgr } from '@microsoft/applicationinsights-core-js';
import { ICustomProperties } from '@microsoft/applicationinsights-core-js';
import { IEventTelemetry } from '@microsoft/applicationinsights-common';
import { IExceptionTelemetry } from '@microsoft/applicationinsights-common';
import { IMetricTelemetry } from '@microsoft/applicationinsights-common';
import { IPageViewTelemetry } from '@microsoft/applicationinsights-common';
import { IPlugin } from '@microsoft/applicationinsights-core-js';
import { IProcessTelemetryContext } from '@microsoft/applicationinsights-core-js';
import { ITelemetryItem } from '@microsoft/applicationinsights-core-js';
import { ITelemetryPluginChain } from '@microsoft/applicationinsights-core-js';
import { ITraceTelemetry } from '@microsoft/applicationinsights-common';
import * as React_2 from 'react';
import { default as React_3 } from 'react';
import { SetStateAction } from 'react';

declare type AIReactCustomEvent<T> = Dispatch<SetStateAction<T>>;

export declare const AppInsightsContext: AppInsightsReactContext;

export declare class AppInsightsErrorBoundary extends React_3.Component<IAppInsightsErrorBoundaryProps, IAppInsightsErrorBoundaryState> {
    state: {
        hasError: boolean;
    };
    componentDidCatch(error: Error, errorInfo: React_3.ErrorInfo): void;
    render(): React_3.ReactNode;
}

declare type AppInsightsReactContext = Context<ReactPlugin>;

declare interface IAppInsightsErrorBoundaryProps {
    appInsights: ReactPlugin;
    onError: React_3.ComponentType<any>;
}

declare interface IAppInsightsErrorBoundaryState {
    hasError: boolean;
}

/**
 * Settings to initialize a ReactAI instance.
 */
export declare interface IReactExtensionConfig {
    /**
     * React router history for enabling Application Insights PageView tracking.
     *
     * @type {History}
     * @memberof IReactAISettings
     */
    readonly history?: History_2;
}

export declare class ReactPlugin extends BaseTelemetryPlugin {
    priority: number;
    identifier: string;
    private _analyticsPlugin;
    private _extensionConfig;
    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?: ITelemetryPluginChain): void;
    /**
     * Get the current cookie manager for this instance
     */
    getCookieMgr(): ICookieMgr;
    /**
     * Get application insights instance.
     */
    getAppInsights(): IAppInsights;
    /**
     * Add Part A fields to the event
     * @param event The event that needs to be processed
     */
    processTelemetry(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    trackMetric(metric: IMetricTelemetry, customProperties: ICustomProperties): void;
    trackPageView(pageView: IPageViewTelemetry): void;
    trackEvent(event: IEventTelemetry, customProperties?: ICustomProperties): void;
    trackException(exception: IExceptionTelemetry, customProperties?: {
        [key: string]: any;
    }): void;
    trackTrace(trace: ITraceTelemetry, customProperties?: {
        [key: string]: any;
    }): void;
    private addHistoryListener;
}

export declare const useAppInsightsContext: () => ReactPlugin;

export declare function useTrackEvent<T>(reactPlugin: ReactPlugin, eventName: string, eventData: T, skipFirstRun?: boolean): AIReactCustomEvent<T>;

export declare const useTrackMetric: (reactPlugin: ReactPlugin, componentName: string) => () => void;

/**
 * Higher-order component function to hook Application Insights tracking
 * in a React component's lifecycle.
 *
 * @param reactPlugin ReactPlugin instance
 * @param Component the React component to be instrumented
 * @param componentName (optional) component name
 * @param className (optional) className of the HOC div
 */
export declare function withAITracking<P>(reactPlugin: ReactPlugin, Component: React_2.ComponentType<P>, componentName?: string, className?: string): React_2.ComponentClass<P>;

export { }