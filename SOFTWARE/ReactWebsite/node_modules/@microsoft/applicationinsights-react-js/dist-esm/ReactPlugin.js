/*
 * Application Insights JavaScript SDK - React Plugin, 3.2.2
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
 * ReactPlugin.ts
 * @copyright Microsoft 2019
 */
import { __extendsFn as __extends } from "@microsoft/applicationinsights-shims";
import { BaseTelemetryPlugin, _InternalMessageId, LoggingSeverity, safeGetCookieMgr, arrForEach } from "@microsoft/applicationinsights-core-js";
var ReactPlugin = /** @class */ (function (_super) {
    __extends(ReactPlugin, _super);
    function ReactPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.priority = 185;
        _this.identifier = 'ReactPlugin';
        return _this;
    }
    ReactPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {
        var _this = this;
        _super.prototype.initialize.call(this, config, core, extensions, pluginChain);
        this._extensionConfig =
            config.extensionConfig && config.extensionConfig[this.identifier]
                ? config.extensionConfig[this.identifier]
                : { history: null };
        arrForEach(extensions, function (ext) {
            var identifier = ext.identifier;
            if (identifier === 'ApplicationInsightsAnalytics') {
                _this._analyticsPlugin = ext;
            }
        });
        if (this._extensionConfig.history) {
            this.addHistoryListener(this._extensionConfig.history);
            var pageViewTelemetry = {
                uri: this._extensionConfig.history.location.pathname
            };
            this.trackPageView(pageViewTelemetry);
        }
    };
    /**
     * Get the current cookie manager for this instance
     */
    ReactPlugin.prototype.getCookieMgr = function () {
        return safeGetCookieMgr(this.core);
    };
    /**
     * Get application insights instance.
     */
    ReactPlugin.prototype.getAppInsights = function () {
        return this._analyticsPlugin;
    };
    /**
     * Add Part A fields to the event
     * @param event The event that needs to be processed
     */
    ReactPlugin.prototype.processTelemetry = function (event, itemCtx) {
        this.processNext(event, itemCtx);
    };
    ReactPlugin.prototype.trackMetric = function (metric, customProperties) {
        if (this._analyticsPlugin) {
            this._analyticsPlugin.trackMetric(metric, customProperties);
        }
        else {
            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, "Analytics plugin is not available, React plugin telemetry will not be sent: ");
        }
    };
    ReactPlugin.prototype.trackPageView = function (pageView) {
        if (this._analyticsPlugin) {
            this._analyticsPlugin.trackPageView(pageView);
        }
        else {
            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, "Analytics plugin is not available, React plugin telemetry will not be sent: ");
        }
    };
    ReactPlugin.prototype.trackEvent = function (event, customProperties) {
        if (this._analyticsPlugin) {
            this._analyticsPlugin.trackEvent(event, customProperties);
        }
        else {
            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, "Analytics plugin is not available, React plugin telemetry will not be sent: ");
        }
    };
    ReactPlugin.prototype.trackException = function (exception, customProperties) {
        if (this._analyticsPlugin) {
            this._analyticsPlugin.trackException(exception, customProperties);
        }
        else {
            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, "Analytics plugin is not available, React plugin telemetry will not be sent: ");
        }
    };
    ReactPlugin.prototype.trackTrace = function (trace, customProperties) {
        if (this._analyticsPlugin) {
            this._analyticsPlugin.trackTrace(trace, customProperties);
        }
        else {
            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, "Analytics plugin is not available, React plugin telemetry will not be sent: ");
        }
    };
    ReactPlugin.prototype.addHistoryListener = function (history) {
        var _this = this;
        var locationListener = function (arg) {
            // v4 of the history API passes "location" as the first argument, while v5 passes an object that contains location and action 
            var locn = null;
            if ("location" in arg) {
                // Looks like v5
                locn = arg["location"];
            }
            else {
                locn = arg;
            }
            // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry
            setTimeout(function () {
                var pageViewTelemetry = { uri: locn.pathname };
                _this.trackPageView(pageViewTelemetry);
            }, 500);
        };
        history.listen(locationListener);
    };
    return ReactPlugin;
}(BaseTelemetryPlugin));
export default ReactPlugin;
//# sourceMappingURL=ReactPlugin.js.map