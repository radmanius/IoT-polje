/*
 * Application Insights JavaScript SDK - React Plugin, 3.2.2
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
import { useEffect, useRef } from "react";
import { dateNow } from "@microsoft/applicationinsights-core-js";
function getEngagementTimeSeconds(trackedData) {
    return ((dateNow() -
        trackedData.firstActiveTimestamp -
        trackedData.totalIdleTime -
        trackedData.idleCount * trackedData.idleTimeout) /
        1000);
}
var useComponentTracking = function (reactPlugin, componentName) {
    var tracking = useRef({
        hookTimestamp: dateNow(),
        firstActiveTimestamp: 0,
        totalIdleTime: 0,
        lastActiveTimestamp: 0,
        idleStartTimestamp: 0,
        idleCount: 0,
        idleTimeout: 5000
    });
    var savedCallback = useRef();
    var callback = function () {
        var trackedData = tracking.current;
        if (trackedData.lastActiveTimestamp > 0 &&
            trackedData.idleStartTimestamp === 0 &&
            dateNow() - trackedData.lastActiveTimestamp >= trackedData.idleTimeout) {
            trackedData.idleStartTimestamp = dateNow();
            trackedData.idleCount++;
        }
    };
    var delay = 100;
    savedCallback.current = callback;
    // Set up the interval.
    useEffect(function () {
        var id = setInterval(savedCallback.current, delay);
        return function () {
            clearInterval(id);
            var trackedData = tracking.current;
            if (trackedData.hookTimestamp === 0) {
                throw new Error("useAppInsights:unload hook: hookTimestamp is not initialized.");
            }
            if (trackedData.firstActiveTimestamp === 0) {
                return;
            }
            var engagementTime = getEngagementTimeSeconds(trackedData);
            var metricData = {
                average: engagementTime,
                name: "React Component Engaged Time (seconds)",
                sampleCount: 1
            };
            var additionalProperties = { "Component Name": componentName };
            reactPlugin.trackMetric(metricData, additionalProperties);
        };
    }, []);
    var trackActivity = function () {
        var trackedData = tracking.current;
        if (trackedData.firstActiveTimestamp === 0) {
            trackedData.firstActiveTimestamp = dateNow();
            trackedData.lastActiveTimestamp = trackedData.firstActiveTimestamp;
        }
        else {
            trackedData.lastActiveTimestamp = dateNow();
        }
        if (trackedData.idleStartTimestamp > 0) {
            var lastIdleTime = trackedData.lastActiveTimestamp - trackedData.idleStartTimestamp;
            trackedData.totalIdleTime += lastIdleTime;
            trackedData.idleStartTimestamp = 0;
        }
    };
    return trackActivity;
};
export default useComponentTracking;
//# sourceMappingURL=useTrackMetric.js.map