{"version":3,"file":"ReactPlugin.js.map","sources":["ReactPlugin.js"],"sourcesContent":["/**\r\n * ReactPlugin.ts\r\n * @copyright Microsoft 2019\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { BaseTelemetryPlugin, _InternalMessageId, LoggingSeverity, safeGetCookieMgr, arrForEach } from \"@microsoft/applicationinsights-core-js\";\r\nvar ReactPlugin = /** @class */ (function (_super) {\r\n    __extends(ReactPlugin, _super);\r\n    function ReactPlugin() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.priority = 185;\r\n        _this.identifier = 'ReactPlugin';\r\n        return _this;\r\n    }\r\n    ReactPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        var _this = this;\r\n        _super.prototype.initialize.call(this, config, core, extensions, pluginChain);\r\n        this._extensionConfig =\r\n            config.extensionConfig && config.extensionConfig[this.identifier]\r\n                ? config.extensionConfig[this.identifier]\r\n                : { history: null };\r\n        arrForEach(extensions, function (ext) {\r\n            var identifier = ext.identifier;\r\n            if (identifier === 'ApplicationInsightsAnalytics') {\r\n                _this._analyticsPlugin = ext;\r\n            }\r\n        });\r\n        if (this._extensionConfig.history) {\r\n            this.addHistoryListener(this._extensionConfig.history);\r\n            var pageViewTelemetry = {\r\n                uri: this._extensionConfig.history.location.pathname\r\n            };\r\n            this.trackPageView(pageViewTelemetry);\r\n        }\r\n    };\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    ReactPlugin.prototype.getCookieMgr = function () {\r\n        return safeGetCookieMgr(this.core);\r\n    };\r\n    /**\r\n     * Get application insights instance.\r\n     */\r\n    ReactPlugin.prototype.getAppInsights = function () {\r\n        return this._analyticsPlugin;\r\n    };\r\n    /**\r\n     * Add Part A fields to the event\r\n     * @param event The event that needs to be processed\r\n     */\r\n    ReactPlugin.prototype.processTelemetry = function (event, itemCtx) {\r\n        this.processNext(event, itemCtx);\r\n    };\r\n    ReactPlugin.prototype.trackMetric = function (metric, customProperties) {\r\n        if (this._analyticsPlugin) {\r\n            this._analyticsPlugin.trackMetric(metric, customProperties);\r\n        }\r\n        else {\r\n            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\r\n        }\r\n    };\r\n    ReactPlugin.prototype.trackPageView = function (pageView) {\r\n        if (this._analyticsPlugin) {\r\n            this._analyticsPlugin.trackPageView(pageView);\r\n        }\r\n        else {\r\n            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\r\n        }\r\n    };\r\n    ReactPlugin.prototype.trackEvent = function (event, customProperties) {\r\n        if (this._analyticsPlugin) {\r\n            this._analyticsPlugin.trackEvent(event, customProperties);\r\n        }\r\n        else {\r\n            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\r\n        }\r\n    };\r\n    ReactPlugin.prototype.trackException = function (exception, customProperties) {\r\n        if (this._analyticsPlugin) {\r\n            this._analyticsPlugin.trackException(exception, customProperties);\r\n        }\r\n        else {\r\n            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\r\n        }\r\n    };\r\n    ReactPlugin.prototype.trackTrace = function (trace, customProperties) {\r\n        if (this._analyticsPlugin) {\r\n            this._analyticsPlugin.trackTrace(trace, customProperties);\r\n        }\r\n        else {\r\n            this.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\r\n        }\r\n    };\r\n    ReactPlugin.prototype.addHistoryListener = function (history) {\r\n        var _this = this;\r\n        var locationListener = function (arg) {\r\n            // v4 of the history API passes \"location\" as the first argument, while v5 passes an object that contains location and action \r\n            var locn = null;\r\n            if (\"location\" in arg) {\r\n                // Looks like v5\r\n                locn = arg[\"location\"];\r\n            }\r\n            else {\r\n                locn = arg;\r\n            }\r\n            // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry\r\n            setTimeout(function () {\r\n                var pageViewTelemetry = { uri: locn.pathname };\r\n                _this.trackPageView(pageViewTelemetry);\r\n            }, 500);\r\n        };\r\n        history.listen(locationListener);\r\n    };\r\n    return ReactPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport default ReactPlugin;\r\n//# sourceMappingURL=ReactPlugin.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,gFAAkC;AACl}