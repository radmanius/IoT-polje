{"version":3,"file":"withAITracking.js.map","sources":["withAITracking.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { __assign, __extends } from \"tslib\";\r\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nimport * as React from 'react';\r\n/**\r\n * Higher-order component function to hook Application Insights tracking\r\n * in a React component's lifecycle.\r\n *\r\n * @param reactPlugin ReactPlugin instance\r\n * @param Component the React component to be instrumented\r\n * @param componentName (optional) component name\r\n * @param className (optional) className of the HOC div\r\n */\r\nexport default function withAITracking(reactPlugin, Component, componentName, className) {\r\n    if (componentName === undefined || componentName === null || typeof componentName !== 'string') {\r\n        componentName = Component.prototype &&\r\n            Component.prototype.constructor &&\r\n            Component.prototype.constructor.name ||\r\n            'Unknown';\r\n    }\r\n    if (className === undefined || className === null || typeof className !== 'string') {\r\n        className = '';\r\n    }\r\n    return /** @class */ (function (_super) {\r\n        __extends(class_1, _super);\r\n        function class_1() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            _this._mountTimestamp = 0;\r\n            _this._firstActiveTimestamp = 0;\r\n            _this._idleStartTimestamp = 0;\r\n            _this._lastActiveTimestamp = 0;\r\n            _this._totalIdleTime = 0;\r\n            _this._idleCount = 0;\r\n            _this._idleTimeout = 5000;\r\n            _this.trackActivity = function (e) {\r\n                if (_this._firstActiveTimestamp === 0) {\r\n                    _this._firstActiveTimestamp = CoreUtils.dateNow();\r\n                    _this._lastActiveTimestamp = _this._firstActiveTimestamp;\r\n                }\r\n                else {\r\n                    _this._lastActiveTimestamp = CoreUtils.dateNow();\r\n                }\r\n                if (_this._idleStartTimestamp > 0) {\r\n                    var lastIdleTime = _this._lastActiveTimestamp - _this._idleStartTimestamp;\r\n                    _this._totalIdleTime += lastIdleTime;\r\n                    _this._idleStartTimestamp = 0;\r\n                }\r\n            };\r\n            return _this;\r\n        }\r\n        class_1.prototype.componentDidMount = function () {\r\n            var _this = this;\r\n            this._mountTimestamp = CoreUtils.dateNow();\r\n            this._firstActiveTimestamp = 0;\r\n            this._totalIdleTime = 0;\r\n            this._lastActiveTimestamp = 0;\r\n            this._idleStartTimestamp = 0;\r\n            this._idleCount = 0;\r\n            this._intervalId = setInterval(function () {\r\n                if (_this._lastActiveTimestamp > 0 && _this._idleStartTimestamp === 0 && CoreUtils.dateNow() - _this._lastActiveTimestamp >= _this._idleTimeout) {\r\n                    _this._idleStartTimestamp = CoreUtils.dateNow();\r\n                    _this._idleCount++;\r\n                }\r\n            }, 100);\r\n        };\r\n        class_1.prototype.componentWillUnmount = function () {\r\n            if (this._mountTimestamp === 0) {\r\n                throw new Error('withAITracking:componentWillUnmount: mountTimestamp is not initialized.');\r\n            }\r\n            if (this._intervalId) {\r\n                clearInterval(this._intervalId);\r\n            }\r\n            if (this._firstActiveTimestamp === 0) {\r\n                return;\r\n            }\r\n            var engagementTime = this.getEngagementTimeSeconds();\r\n            var metricData = {\r\n                average: engagementTime,\r\n                name: 'React Component Engaged Time (seconds)',\r\n                sampleCount: 1\r\n            };\r\n            var additionalProperties = { 'Component Name': componentName };\r\n            reactPlugin.trackMetric(metricData, additionalProperties);\r\n        };\r\n        class_1.prototype.render = function () {\r\n            return (React.createElement(\"div\", { onKeyDown: this.trackActivity, onMouseMove: this.trackActivity, onScroll: this.trackActivity, onMouseDown: this.trackActivity, onTouchStart: this.trackActivity, onTouchMove: this.trackActivity, className: className },\r\n                React.createElement(Component, __assign({}, this.props))));\r\n        };\r\n        class_1.prototype.getEngagementTimeSeconds = function () {\r\n            return (CoreUtils.dateNow() - this._firstActiveTimestamp - this._totalIdleTime - this._idleCount * this._idleTimeout) / 1000;\r\n        };\r\n        return class_1;\r\n    }(React.Component));\r\n}\r\n//# sourceMappingURL=withAITracking.js.map"],"names":[],"mappings":";;;;AAA4D;AAC1B;AAClC,wGAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}