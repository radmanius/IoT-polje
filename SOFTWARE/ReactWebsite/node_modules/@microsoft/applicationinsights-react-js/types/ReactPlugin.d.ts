/**
 * ReactPlugin.ts
 * @copyright Microsoft 2019
 */
import { IConfig, IPageViewTelemetry, IMetricTelemetry, IAppInsights, IEventTelemetry, IExceptionTelemetry, ITraceTelemetry } from "@microsoft/applicationinsights-common";
import { IPlugin, IConfiguration, IAppInsightsCore, BaseTelemetryPlugin, ITelemetryItem, IProcessTelemetryContext, ITelemetryPluginChain, ICustomProperties, ICookieMgr } from "@microsoft/applicationinsights-core-js";
export default class ReactPlugin extends BaseTelemetryPlugin {
    priority: number;
    identifier: string;
    private _analyticsPlugin;
    private _extensionConfig;
    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?: ITelemetryPluginChain): void;
    /**
     * Get the current cookie manager for this instance
     */
    getCookieMgr(): ICookieMgr;
    /**
     * Get application insights instance.
     */
    getAppInsights(): IAppInsights;
    /**
     * Add Part A fields to the event
     * @param event The event that needs to be processed
     */
    processTelemetry(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    trackMetric(metric: IMetricTelemetry, customProperties: ICustomProperties): void;
    trackPageView(pageView: IPageViewTelemetry): void;
    trackEvent(event: IEventTelemetry, customProperties?: ICustomProperties): void;
    trackException(exception: IExceptionTelemetry, customProperties?: {
        [key: string]: any;
    }): void;
    trackTrace(trace: ITraceTelemetry, customProperties?: {
        [key: string]: any;
    }): void;
    private addHistoryListener;
}
