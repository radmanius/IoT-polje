	@PutMapping("/scene")
	public BodyBuilder sceneEdit(@RequestBody String model) throws JsonMappingException, JsonProcessingException {
		ObjectMapper objectMapper = new ObjectMapper();
		objectMapper.setSerializationInclusion(Include.NON_NULL);
		
		
		MesurmentView view1 = new MesurmentView();

		Map<String, String> mapper = new HashMap<>();
		JsonNode jsonNodeRoot = null;
		try {
			jsonNodeRoot = objectMapper.readTree(model);
			mapper = objectMapper.readValue(model, TreeMap.class);
			view1 = objectMapper.readValue(model, MesurmentView.class);
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		String a = jsonNodeRoot.get("title").textValue();
		MesurmentView view = new MesurmentView();
		
		view.setTitle(jsonNodeRoot.get("title").textValue());
		view.setViewType(jsonNodeRoot.get("viewType").textValue());
		view.setMeasurementUnit(jsonNodeRoot.get("measurementUnit").textValue());
		
		String ab = jsonNodeRoot.get("selectForm").toString();
		MeasurmentSelectForm form = new MeasurmentSelectForm();
		form = objectMapper.readValue(ab, MeasurmentSelectForm.class);
		Request query = new Request();
		

		
		
		return ResponseEntity.status(HttpStatus.OK);
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			ObjectMapper objectMapper = new ObjectMapper();
		objectMapper.setSerializationInclusion(Include.NON_NULL);
		objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

		Scene customer;
		 try {
			customer = objectMapper.readValue(model, Scene.class);
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}

//		
////		ObjectMapper 
		DocumentContext jsonContext = JsonPath.parse(model);
		
////		String accessToken = jsonContext.read("$['access_token']");
//		
//		var a = jsonContext.read("$['layout']");
//		
//		var b = jsonContext.read("$['title']");
//		
////		Map<String,Object> output = model.asMap();
//		
////		Map<String,String> output = model.getProperties();
////		var keys = output.keySet();
////		
////		System.out.println(Arrays.toString(keys.toArray()));