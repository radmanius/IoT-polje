swagger: '2.0'
info:
  title: Mobile IoT-field
  version: '1.0'

tags:
  - name: iot-write
    description: pristup pisanju
  - name: iot-read
    description: pristup čitanju
paths:
  /scene:
    get:
      tags:
        - 'iot-read'
      summary: get all scenes by access right
      responses:
        '200':
          description: 'returns list of all scenes'
          schema:
            type: array
            items:
              $ref: '#/definitions/ShortScene'
    post:
      tags:
        - 'iot-read'
      summary: get all filtered scenes by access right
      responses:
        '200':
          description: 'returns list of filtered scenes by tags and access right'
          schema:
            type: array
            items:
              $ref: '#/definitions/ShortScene'
    parameters:
      - in: body
        name: list of tags
        schema:
          type: array
          items:
            type: string
            example:
              "fer"

  /scene/{id}:
    get:
      tags:
        - 'iot-read'
      summary: get scene by scene id
      responses:
        200:
          description: returns one scene with details
          schema:
            type: object
            $ref: '#/definitions/SceneDTO'
    parameters:
      - in: path
        type: string
        name: id scene
        description: scena2
        required: true


  /scene/add:
    post:
      tags:
        - 'iot-write'
      summary: add whole scene if alread does not exists
      responses:
        201:
          description: scene added
          schema:
            type: object
            $ref:
              '#/definitions/Scene'
      parameters:
        - in: body
          name: scene
          schema:
            type: object
            $ref:
              '#/definitions/Scene'

  /scene/edit:
    post:
      tags:
        - 'iot-write'
      summary: edit scene if exists
      responses:
        200:
          description: scene edited
          schema:
            type: object
            $ref:
              '#/definitions/Scene'
      parameters:
        - in: body
          name: scene
          schema:
            type: object
            $ref:
              '#/definitions/Scene'


  /keys:
    get:
      tags:
        - 'iot-read'
      summary: 'returns map of keys for specific user'
      responses:
        200:
          description: returns object with keys
          schema:
            type: object
            $ref: '#/definitions/KeyDTO'
  /tags:
    get:
      tags:
        - 'iot-read'
      summary: 'get array of tags for specific user'
      responses:
        '200':
          description: 'returns list of filtered scenes by access right'
          schema:
              type: array
              items:
                  type: string
                  example:
                    "fer"


definitions:

  KeyDTO:
    type: array
    items:
      type: object
      example:
        {"token1": "eyJhbGciLjUtYjM2Jex7co5xh0r7AdlYP7DJbjwkRh2YA7ZR7701MVFo7VLwiP8hYm_7A", "token2": ""}
    properties:
      token1:
        type: string
        example:
          "eyJhbGciLjUtYjM2Jex7co5xh0r7AdlYP7DJbjwkRh2YA7ZR7701MVFo7VLwiP8hYm_7A"
      token2:
        type: string
        description: can be empty
        example:
          ""
  Query:
    type: object
    properties:
      uri:
        type: string
        example: https://iotat.tel.fer.hr:57786/api/v2/query?org=fer
      method:
        type: string
        example:
            "POST"
      headers:
        type: object
        example: { "Authorization": [
            "Token {{token1}}"
        ],
                   "Accept": [
                       "application/csv"
                   ],
                   "Content-Type": [
                       "application/vnd.flux"
                   ] }
  View:
    type: object
    properties:
      title:
        type: string
        example: view title
      query:
        $ref: '#/definitions/Query'
      payload:
        type: string
        example:
          "from(bucket:\"telegraf\")\n        |> range(start: {{startTimeISO}})\n        |> filter(fn: (r) => r._measurement == \"HUM\" and r.id_wasp == \"SAP01\" and r._field == \"value\")\n        |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"host\", \"id\"])\n        |> window(every: {{agregationRange}})\n        |> mean()\n        |> duplicate(column: \"_stop\", as: \"_time\")\n        |> drop(columns: [\"_start\", \"_stop\"])\n\n"
  SceneDTO:
    type: object
    properties:
      id:
        type: string
        example: scena2
      title:
        type: string
        example: HUM_sap01AG
      subtitle:
        type: string
        example: dohvaca AVG vrijednost podataka HUM za sap01 senzor
      pictureLink:
        type: string
        example:
          "https://somePicture"
      layout:
        type: string
        example:
          LIST
      tags:
        type: array
        items:
          type: array
          items:
            type: string
        example: [ "fer", "ferit" ]
      views:
        type: array
        items:
          $ref: '#/definitions/View'

  Scene:
    type: object
    properties:
      id:
        type: string
        example: scena2
      title:
        type: string
        example: HUM_sap01AG
      subtitle:
        type: string
        example: dohvaca AVG vrijednost podataka HUM za sap01 senzor
      pictureLink:
        type: string
        example:
          "https://somePicture"
      layout:
        type: string
        example:
          LIST
      tags:
        type: array
        items:
          type: string
        example: [ "fer", "ferit" ]
      views:
        type: array
        items:
          $ref: '#/definitions/View'
      roles:
        type: array
        example:
          ["fer", "ferit", "admin"]
      keys:
        type: object
        $ref: '#/definitions/KeyDTO'
  ShortScene:
    type: object
    properties:
      id:
        type: string
        example: scena2
      title:
        type: string
        example: HUM_sap01AG
      subtitle:
        type: string
        example: dohvaca AVG vrijednost podataka HUM za sap01 senzor
      pictureLink:
        type: string
        example:
          "https://somePicture"

